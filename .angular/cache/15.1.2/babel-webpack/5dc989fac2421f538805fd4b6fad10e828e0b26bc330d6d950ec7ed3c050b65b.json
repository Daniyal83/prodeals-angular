{"ast":null,"code":"import { autorun, reaction, makeAutoObservable, action as action$1, computed as computed$1, observable as observable$1 } from 'mobx';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, Injectable, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { NavigationEnd } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\n// import { mobxAngularDebug } from '../utils/mobx-angular-debug';\nclass MobxAutorunDirective {\n  constructor(templateRef, viewContainer) {\n    Object.defineProperty(this, \"templateRef\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: templateRef\n    });\n    Object.defineProperty(this, \"viewContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: viewContainer\n    });\n    Object.defineProperty(this, \"templateBindings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"dispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"view\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"allAutorunOptions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: ['delay', 'scheduler', 'requiresObservable', 'name', 'onError']\n    });\n    Object.defineProperty(this, \"mobxAutorun\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  ngOnInit() {\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\n    if (this.dispose) {\n      this.dispose();\n    }\n    if (this.shouldDetach()) {\n      this.view.detach();\n    }\n    this.autoDetect(this.view);\n    // mobxAngularDebug(this.view, this.dispose);\n  }\n\n  shouldDetach() {\n    return this.mobxAutorun && this.mobxAutorun.detach;\n  }\n  autoDetect(view) {\n    const opts = this.getAutorunOptions();\n    this.dispose = autorun(() => view.detectChanges(), opts);\n  }\n  getAutorunOptions() {\n    return Object.keys(this.mobxAutorun || {}).reduce((opts, current) => {\n      if (this.allAutorunOptions.includes(current)) {\n        opts[current] = this.mobxAutorun[current];\n      }\n      return opts;\n    }, {});\n  }\n  ngOnDestroy() {\n    if (this.dispose) {\n      this.dispose();\n    }\n  }\n}\nObject.defineProperty(MobxAutorunDirective, \"\\u0275fac\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: function MobxAutorunDirective_Factory(t) {\n    return new (t || MobxAutorunDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  }\n});\nObject.defineProperty(MobxAutorunDirective, \"\\u0275dir\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MobxAutorunDirective,\n    selectors: [[\"\", \"mobxAutorun\", \"\"]],\n    inputs: {\n      mobxAutorun: \"mobxAutorun\"\n    }\n  })\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass MobxReactionDirective extends MobxAutorunDirective {\n  constructor(templateRef, viewContainer) {\n    super(templateRef, viewContainer);\n    Object.defineProperty(this, \"templateRef\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: templateRef\n    });\n    Object.defineProperty(this, \"viewContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: viewContainer\n    });\n    Object.defineProperty(this, \"mobxReaction\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"mobxReactionOptions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  autoDetect(view) {\n    const opts = Object.assign({\n      fireImmediately: true\n    }, this.mobxReactionOptions);\n    this.dispose = reaction(this.mobxReaction, () => {\n      view.detectChanges();\n    }, opts);\n  }\n}\nObject.defineProperty(MobxReactionDirective, \"\\u0275fac\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: function MobxReactionDirective_Factory(t) {\n    return new (t || MobxReactionDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  }\n});\nObject.defineProperty(MobxReactionDirective, \"\\u0275dir\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MobxReactionDirective,\n    selectors: [[\"\", \"mobxReaction\", \"\"]],\n    inputs: {\n      mobxReaction: \"mobxReaction\",\n      mobxReactionOptions: \"mobxReactionOptions\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  })\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass RouterStore {\n  constructor(router, activatedRoute) {\n    Object.defineProperty(this, \"router\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: router\n    });\n    Object.defineProperty(this, \"activatedRoute\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: activatedRoute\n    });\n    Object.defineProperty(this, \"url\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: ''\n    });\n    Object.defineProperty(this, \"routeSnapshot\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: null\n    });\n    makeAutoObservable(this);\n    router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(e => this.routeListener(e));\n  }\n  routeListener(event) {\n    this.routeSnapshot = this.activatedRoute.snapshot;\n    this.url = event.urlAfterRedirects;\n  }\n}\nObject.defineProperty(RouterStore, \"\\u0275fac\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: function RouterStore_Factory(t) {\n    return new (t || RouterStore)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute));\n  }\n});\nObject.defineProperty(RouterStore, \"\\u0275prov\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: RouterStore,\n    factory: RouterStore.ɵfac,\n    providedIn: 'root'\n  })\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst DIRECTIVES = [MobxAutorunDirective, MobxReactionDirective];\nclass MobxAngularModule {}\nObject.defineProperty(MobxAngularModule, \"\\u0275fac\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: function MobxAngularModule_Factory(t) {\n    return new (t || MobxAngularModule)();\n  }\n});\nObject.defineProperty(MobxAngularModule, \"\\u0275mod\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MobxAngularModule\n  })\n});\nObject.defineProperty(MobxAngularModule, \"\\u0275inj\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: /* @__PURE__ */i0.ɵɵdefineInjector({})\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of mobx-angular\n */\n// Re-export mobx operators to be able to use inside components with AOT:\nfunction actionInternal(...args) {\n  return action$1(...args);\n}\nconst action = Object.assign(actionInternal, action$1);\nfunction computedInternal(...args) {\n  return computed$1(...args);\n}\nconst computed = Object.assign(computedInternal, computed$1);\nfunction observableInternal(...args) {\n  return observable$1(...args);\n}\nconst observable = Object.assign(observableInternal, observable$1);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MobxAngularModule, MobxAutorunDirective, MobxReactionDirective, RouterStore, action, actionInternal, computed, observable };\n//# sourceMappingURL=mobx-angular.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}